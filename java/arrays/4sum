/*
Given an array nums of n integers and an integer target, are there elements a, b, c, and d in nums such that a + b + c + d = target? Find all unique quadruplets in the array which gives the sum of target.

Note:

The solution set must not contain duplicate quadruplets.

Example:

Given array nums = [1, 0, -1, 0, -2, 2], and target = 0.

A solution set is:
[
  [-1,  0, 0, 1],
  [-2, -1, 1, 2],
  [-2,  0, 0, 2]
]

*/


import java.io.*;
import java.util.*;

class MyCode {
	public static void main (String[] args) {
      int[] num = {1, 0, -1, 0, -2, 2};
      List<List<Integer>> res = sum_combinations(num);
      for(int i=0;i<res.size();i++){
         System.out.println();
        System.out.print("[");
        for(int j=0;j<res.get(i).size();j++){
          System.out.print(res.get(i).get(j)+" , ");
        }
        System.out.print("]");
      }
  }

  public static List<List<Integer>> sum_combinations(int[] num){
     
     List<List<Integer>> result = new ArrayList<>();
     
     //base case
     if(num.length<4||num==null) return result; //null is returned here
     
     Arrays.sort(num);
     //logic
     for(int i = 0; i < num.length-3 ; i++){
       for(int j=i+1; j<num.length-2; j++){
         
         int target = num[i]+num[j];
         target=-1*target;
         
         int low = j+1;
         int high = num.length-1;
         
         while(low < high){
          
          if(num[low]+num[high] == target){ //target found -> add to result
             result.add(Arrays.asList(num[i], num[j], num[low], num[high]));
             low++; high--;
             
             while(low<high&&num[low]==num[low+1]) low++;
             while(low<high&&num[high]==num[high-1]) high--;
             
           }
           
           else if(num[low]+num[high] > target) high--;
           
           else low++;
         }
         
       }
     }
     return result;
  }
}

